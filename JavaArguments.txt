java -server -Xms12G -Xmx12G -XX:+UseG1GC -Dsun.rmi.dgc.server.gcInterval=2147483646 -XX:+UnlockExperimentalVMOptions -XX:MaxGCPauseMillis=50 -XX:+DisableExplicitGC -XX:TargetSurvivorRatio=90 -XX:G1NewSizePercent=30 -XX:G1HeapRegionSize=32M -XX:G1MaxNewSizePercent=80 -XX:G1MixedGCLiveThresholdPercent=35 -XX:+AlwaysPreTouch -XX:+ParallelRefProcEnabled -XX:ParallelGCThreads=8 -XX:ConcGCThreads=8 -jar minecraft_server.jar nogui -dfml.queryresult=confirm

-XX:+UseG1GC
G1 Operates differently than previous collectors and is able to handle larger heaps more efficiently. If it does not need the memory given to it, it will not use it. The entire engine operates differently and does not suffer from too large of heaps, and this is industry wide accepted information that under G1 to keep Xms and Xmx the same!

-Dsun.rmi.dgc.server.gcInterval=2147483646 
This tells the RMI layer not to do a full GC every minute. Yeah.

-XX:+UnlockExperimentalVMOptions 
Turns on experimental VM options. Duh.

-XX:MaxGCPauseMillis=50 
This tells G1GC to try and not stop for more than 50 milliseconds when garbage collecting, if possible. This is a target, and G1GC will ignore you if you put a silly number in like 1 which is unattainable. 50 millis is the time for one server tick.

+DisableExplicitGC: Many plugins think they know how to control memory, and try to invoke garbage collection. Plugins that do this trigger a full garbage collection, triggering a massive lag spike. This flag disables plugins from trying to do this, protecting you from their bad code.

-XX:TargetSurvivorRatio
This setting controls how much of the Survivor space is ABLE to be used before promotion. If survivor gets too full, stuff starts promoting to Old Gen. The reason behind this is to be able to handle memory allocation spikes.

-XX:G1NewSizePercent=30 
Tells G1GC to put aside 30% of the heap as "new" space. This is space where new objects will be allocated, in general. You want a decent amount, cos MC makes a lot of objects (/me looks at BlockPos) and you don't want to have to run a collection whenever it gets full (this is a big source of microstutters). Given more NewGen, we are able to slow down the intervals of Young Gen collections, resulting in more time for short lived objects to die young and overall more efficient GC behavior.

-XX:G1MaxNewSizePercent=80
Sets the percentage of the heap size to use as the maximum for young generation size. The default value is 60 percent of your Java heap.

-XX:G1MixedGCLiveThresholdPercent=35 
Controls when to include Mixed GC’s in the Young GC collection, keeping Old Gen tidy without doing a normal Old Gen GC collection. When your memory is less than this percent, old gen won’t even be included in ‘mixed’ collections. Mixed are not as heavy as a full old collection, so having small incremental cleanups of old keeps memory usage light.

-XX:+AlwaysPreTouch
AlwaysPreTouch gets the memory setup and reserved at process start ensuring it is contiguous, improving the efficiency of it more.

-XX:+ParallelRefProcEnabled
Optimizes the GC process to use multiple threads.

-XX:ParallelGCThreads=8
Sets the value of the STW worker threads. Sets the value of n to the number of logical processors.

-XX:ConcGCThreads=8
Sets the number of parallel marking threads.

-XX:G1HeapRegionSize=32M
This tells G1GC to allocate it's garbage collection blocks in units of 32megs. The reason for this is that chunk data is typically just over 8megs in size, and if you leave it default (16 megs), it'll treat all the chunk data as "humungous" and so it'll have to be garbage collected specially as a result. Some mods cause humongous allocations as well, such as journeymap, and this setting helps them too.

-XX:+AlwaysPreTouch
AlwaysPreTouch gets the memory setup and reserved at process start ensuring it is contiguous, improving the efficiency of it more. This improves the operating systems memory access speed.

nogui
Removes the default minecraft server gui.

-dfml.queryresult=confirm
Autoconfirms forge when a world change has occoured to stop the server never starting.